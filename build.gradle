apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.6
targetCompatibility = 1.6
version = '1.0'

repositories {
    mavenCentral()
}

[ compileJava, compileTestJava ]*.options*.encoding = 'UTF-8'

dependencies {
    compile 'org.apache.httpcomponents:httpcore:4.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.3.5'
    compile 'org.apache.httpcomponents:httpmime:4.3.5'
    compile 'org.jsoup:jsoup:1.8.1'
    // compile 'commons-io:commons-io:2.4'
    // compile 'org.apache.commons:commons-lang3:3.3.2'
    // compile 'org.bouncycastle:bcprov-jdk16:1.46'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-simple:1.7.7'
    //compile 'org.slf4j:slf4j-log4j12:1.7.7'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/**
 * Find the javac executable for the current sourceCompatibility. If the current JVM match then it return null.
 */
/*
String findJavacExecutable() {
    File javaHome = new File( System.getProperty( "java.home" ) )
    if( javaHome.getName().equals( "jre" ) ) {
        javaHome = javaHome.getParentFile()
    }
    if( javaHome.getName().startsWith( "jdk${sourceCompatibility}" ) ) {
        return null
    }
    File installDir = javaHome.getParentFile();
    for( File file : installDir.listFiles() ) {
        if( file.getName().startsWith( "jdk${sourceCompatibility}" ) ) {
            return new File( file, "bin/javac" ).getAbsolutePath()
        }
    }
    println "Warning: javac executable for ${sourceCompatibility} was not found."
    return null
}
task findJavac {
    description '===  find and set the javac executable for the given sourceCompatibility ==='
    compileJava.dependsOn(findJavac)
    doLast {
        String executable = findJavacExecutable()
        if( executable != null ) {
            println "\tjavac: ${executable}"
            compileJava.options.fork = true
            compileJava.options.forkOptions.executable = executable
        }
    }
}
*/